package BOOKINGTOUR.controller;



import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.transaction.Transactional;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import BOOKINGTOUR.entity.BookingTour;
import BOOKINGTOUR.entity.CTVe;
import BOOKINGTOUR.entity.DiemDuLich;
import BOOKINGTOUR.entity.KhachHang;
import BOOKINGTOUR.entity.KhuyenMai;
import BOOKINGTOUR.entity.NhanVien;
import BOOKINGTOUR.entity.TaiKhoan;
import BOOKINGTOUR.entity.VeTour;
import javassist.expr.NewArray;






@Transactional
@Controller
public class start {
	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
	@Autowired
    SessionFactory factory;
	@RequestMapping("index")
	public String welcome(HttpServletRequest request,ModelMap model) {
		model.addAttribute("taiKhoan", new TaiKhoan());
		return "login/login";
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(ModelMap model, HttpServletRequest request,@ModelAttribute("taiKhoan") TaiKhoan taiKhoan, BindingResult errors) {
		boolean kt=true;
		if (taiKhoan.getMANV().trim().length() == 0) {
			errors.rejectValue("MANV", "taiKhoan", "Vui lòng nhập username !");
			kt=false;
		}
		 if (taiKhoan.getPASSWORD().trim().length() == 0) {
			errors.rejectValue("PASSWORD", "taiKhoan", "Vui lòng nhập password !");kt=false;
		}
		if(taiKhoan.getPASSWORD().trim().length() <5) {
			errors.rejectValue("PASSWORD", "taiKhoan", "Password phải từ 5 kí tự trở lên!");kt=false;}
		if(kt==true) {
		 HttpSession session = request.getSession();
		String username = taiKhoan.getMANV();
		String password = taiKhoan.getPASSWORD();
		TaiKhoan taikhoan = queryLogin(username, password);
		if (taikhoan != null) {
			if (taikhoan.getNhanVien().getTrangThai()==1) {
				 
			       
				session.setAttribute("TaiKhoan", taikhoan);
				if (taikhoan.getIsAdmin()==1) {
					return "admin/admin";
				} else  {
					return "manager/manager";
				}
			} 
			else {
				model.addAttribute("error", "Tài khoản đã ngừng hoạt động !!!");
				return "login/login";
			}
		}
		else
			model.addAttribute("error", "Mã tài khoản hoặc mật khẩu chưa đúng !!!");}
			return "login/login"; 
		
	}
	
	@RequestMapping(value = "/logout")
	public String logout(HttpSession session) {
		// Xóa thông tin người dùng khỏi phiên làm việc và kết thúc phiên
		session.removeAttribute("TaiKhoan");
		/* session.removeAttribute("quyenHan"); */
		session.invalidate();
		return "redirect:/index.htm";
	}
	
	@RequestMapping(value="danhsachnhanvien")
	public String danhsachtaikhoan(HttpServletRequest request,ModelMap model,@ModelAttribute("message") String message) {
		model.addAttribute("nhanviens",getListNhanVien());
		model.addAttribute("message", message);
		return"admin/dsnhanvien";
	}
	
	@RequestMapping(value="themnhanvien")
	public String themnhanvien(HttpServletRequest request,ModelMap model) {
		NhanVien nhanVien =new NhanVien();
		TaiKhoan taiKhoan =new TaiKhoan();
		nhanVien.setTaikhoan(taiKhoan);
		model.addAttribute("nhanvien",nhanVien);
		model.addAttribute("nhanviens",getListNhanVien());
		return"admin/themnhanvien";
	}
	
	@RequestMapping(value="suanhanvien/{maNV}")
	public String suanhanvien(ModelMap model ,@PathVariable String maNV) {
		model.addAttribute("nhanVien1",this.searchNhanVien(maNV));
		model.addAttribute("nhanviens",getListNhanVien());
		return"admin/suanhanvien";
	}
	
	@RequestMapping(value="suattcanhan")
	public String suattcanhan(ModelMap model ,HttpSession session) {
		TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("TaiKhoan");
		model.addAttribute("nhanVien1",taiKhoan.getNhanVien());
		return"admin/suattcanhan";
	}
	
	@RequestMapping(value="updatettcanhan", method = RequestMethod.POST) 
	public String suattcanhan(@ModelAttribute("nhanVien1") NhanVien nhanVien,ModelMap model,BindingResult errors) {
	
		boolean kt=true;
		if (nhanVien.getHo().trim().length() == 0) {
			errors.rejectValue("ho", "nhanVien", "Vui lòng nhập họ!");
			kt=false;
		}
		 if (nhanVien.getTen().trim().length() == 0) {
			errors.rejectValue("ten", "nhanVien", "Vui lòng nhập tên !");kt=false;
		}
		if (nhanVien.getcCCD().trim().length() == 0) {
			errors.rejectValue("cCCD", "nhanVien", "Vui lòng nhập CCCD !");kt=false;
		}
		if(kt==true) {
		
		Session session = factory.openSession();
			Transaction t = session.beginTransaction();
			try {
				session.update(nhanVien);
				t.commit();
				model.addAttribute("message", 1);
			} catch (Exception e) {
				t.rollback();
				model.addAttribute("message", 2);
				
			} finally {
				session.close();
			}}
			model.addAttribute("nhanVien1", nhanVien);
			model.addAttribute("nhanviens",getListNhanVien());
		return "admin/suattcanhan";
	}
	
	@RequestMapping(value="suanhanvien/update", method = RequestMethod.POST) 
	public String editNhanVien(@ModelAttribute("nhanVien1") NhanVien nhanVien,ModelMap model,BindingResult errors) {
	
		boolean kt=true;
		if (nhanVien.getHo().trim().length() == 0) {
			errors.rejectValue("ho", "nhanVien", "Vui lòng nhập họ!");
			kt=false;
		}
		 if (nhanVien.getTen().trim().length() == 0) {
			errors.rejectValue("ten", "nhanVien", "Vui lòng nhập tên !");kt=false;
		}
		if (nhanVien.getcCCD().trim().length() == 0) {
			errors.rejectValue("cCCD", "nhanVien", "Vui lòng nhập CCCD !");kt=false;
		}
		if(kt==true) {
		
		Session session = factory.openSession();
			Transaction t = session.beginTransaction();
			try {
				session.update(nhanVien);
				t.commit();
				model.addAttribute("message", 1);
			} catch (Exception e) {
				t.rollback();
				model.addAttribute("message", 2);
				
			} finally {
				session.close();
			}}
			model.addAttribute("nhanVien1", nhanVien);
			model.addAttribute("nhanviens",getListNhanVien());
		return "admin/suanhanvien";
	}
	
	@RequestMapping(value="xoanhanvien/{maNV}")
	public String xoanhanvien(ModelMap model ,@PathVariable String maNV) {
		NhanVien nhanVien = searchNhanVien(maNV);
		TaiKhoan taiKhoan = nhanVien.getTaikhoan(); 
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		try {
			String hql2 = "delete from TaiKhoan where maNV =:maNV ";
			String hql1 = "delete from NhanVien where maNV=:maNV";
			
			           

			
			Query query2 = session.createQuery(hql2);
			query2.setParameter("maNV", maNV);
			int result2 = query2.executeUpdate();
			Query query1 = session.createQuery(hql1);
			query1.setParameter("maNV", maNV);
			int result1 = query1.executeUpdate();

			t.commit();
			
			model.addAttribute("message", 1);
		} catch (Exception e) {
			t.rollback();
			model.addAttribute("message", 2);
			
		} finally {
			session.close();
		}
		
		return"redirect:/danhsachnhanvien.htm";
	}
	
	
	public List<NhanVien> getListNhanVien() {
		Session session = factory.getCurrentSession();
		String hql = "FROM NhanVien";
		List<NhanVien> nhanviens = session.createQuery(hql).list();
		return  nhanviens;
	}
	
	
	public TaiKhoan queryLogin(String username, String password) {

		Session session = factory.getCurrentSession();
		
		String hql = "FROM TaiKhoan WHERE MANV= :USERNAME AND PASSWORD = :PASSWORD";
		Query query = session.createQuery(hql);
		query.setParameter("USERNAME", username);
		query.setParameter("PASSWORD", password);
		if(query.list().size()==0) {
			return null;
		}
		return  (TaiKhoan)query.list().get(0);
	}
	@RequestMapping(value="insert", method = RequestMethod.POST) 
	public String insertdiemdulich(HttpServletRequest request,@ModelAttribute("nhanvien") NhanVien nhanVien,ModelMap model, BindingResult errors) {
		
	
		boolean kt=true;
		if (nhanVien.getMaNV().trim().length() == 0) {
			errors.rejectValue("maNV", "nhanVien", "Vui lòng nhập mã nhân viên !");kt=false;
		}
		 if(searchNhanVien(nhanVien.getMaNV()) != null) {
			errors.rejectValue("maNV", "nhanVien", "Mã nhân viên bị trùng !");kt=false;
		}
		 if (nhanVien.getHo().trim().length() == 0) {
			errors.rejectValue("ho", "nhanVien", "Vui lòng nhập họ!");kt=false;
		}
		 if (nhanVien.getTen().trim().length() == 0) {
			errors.rejectValue("ten", "nhanVien", "Vui lòng nhập tên !");kt=false;
		}
		if (nhanVien.getcCCD().trim().length() == 0) {
			errors.rejectValue("cCCD", "nhanVien", "Vui lòng nhập CCCD !");kt=false;
		}
		if(checkTrungCCCD(nhanVien.getcCCD())== 1) {
			errors.rejectValue("cCCD", "nhanVien", "Vui lòng nhập CCCD !");kt=false;
		}
		if(kt==true) {
		
		
		
		Session session = factory.openSession();
		Transaction tr = session.beginTransaction();
		nhanVien.setTrangThai(1);
	
		try {
			String mkDefault = "123456";
			TaiKhoan tk = new TaiKhoan();
			/* tk.setMANV(nhanVien.getMaNV()); */
			tk.setPASSWORD(mkDefault);
			tk.setIsAdmin(Integer.valueOf(request.getParameter("isAdmin")));
			System.out.println(Integer.valueOf(request.getParameter("isAdmin")));
			tk.setNhanVien(nhanVien);
			session.save(nhanVien);
			session.save(tk);
			tr.commit();
			model.addAttribute("message",1);
		} catch (Exception e) {
			tr.rollback();
			model.addAttribute("message",2);
		} finally {
			session.close();
		}}
		model.addAttribute("nhanviens",getListNhanVien());
		return "admin/themnhanvien";
	}

	
	
	
	
	
	
	public NhanVien searchNhanVien(String maNV) {
		Session session = factory.getCurrentSession();
		String hql = "FROM NhanVien WHERE maNV = :maNV";
		Query query = session.createQuery(hql);
		query.setParameter("maNV", maNV);
		if(query.list().size()==0) return null;
		return (NhanVien) query.list().get(0);
	}
	public String taoMaNV() {
		String maNV1 = "manager";
		int ma = getNhanVien1().size() +1;
		maNV1 += String.valueOf(ma);
		return maNV1;
	}
	public List<NhanVien> getNhanVien1() {
		Session session = factory.getCurrentSession();
		String hql = "FROM NhanVien";
		Query query = session.createQuery(hql);
		List<NhanVien> list = query.list();
		return list;
	}
	private int checkTrungCCCD( String cCCD) {
		Session session = factory.getCurrentSession();
		String hql = "FROM NhanVien where cCCD = :cCCD";
		Query query = session.createQuery(hql);
		query.setParameter("cCCD", cCCD);
		List<NhanVien> list = query.list();
		if(list.size() == 0) return 0;
		return 1;
	}
	public String getTen(String hoTen) {
	    hoTen.trim();
	    String ten="";
	    int index= hoTen.lastIndexOf(' ');
	    ten = hoTen.substring(index+1);
	  return ten;
	}
public String getHo(String hoTen) {
    hoTen.trim();
    int index= hoTen.lastIndexOf(getTen(hoTen));
    String ho = hoTen.substring(0,index);
    
  return ho.trim();
}

}
